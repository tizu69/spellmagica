import registry
from utils import pascal, camel
import sys
import lua

reg = registry.get()

out = "--- Code generated by spellmagica. DO NOT EDIT.\n"
out += "--- @format disable\n\n"

out += "--- @class Spellmagica\n"
out += "--- The Spellmagica runtime v0.0.1\n"
out += "local Spellmagica = {}\n"

out += "--- Creates a new Spell builder.\n"
out += "--- @return Spellmagica\n"
out += "function Spellmagica.new()"
out += "return setmetatable({},{__index=Spellmagica})"
out += "end\n"

out += "--- Pushes a pattern onto the stack.\n"
out += "--- @param pattern string\n"
out += "function Spellmagica:p(pattern)"
out += 'table.insert(self, {startDir="EAST",angles=pattern})'
out += "end\n"

pattern_names: dict[str, str] = {}
pattern_uname_ids: dict[str, str] = {}
for pattern in reg["patterns"].values():
    id = pattern["id"]
    mod, name = id.split(":")
    if mod == "hexcasting":
        pattern_names[id] = f"{camel(name.replace('/', '_'))}"
    else:
        pattern_names[id] = f"{camel(mod)}{pascal(name.replace('/', '_'))}"
    if pattern_names[id] in lua.keywords or pattern_names[id][0].isdigit():
        pattern_names[id] = "_" + pattern_names[id]
    pattern_uname_ids[pattern["name"]] = id
if len(sys.argv) > 1:
    with open(sys.argv[1], "r", encoding="utf-8") as f:
        data = f.read()
    patterns_to_build = {pid for pid in pattern_names.values() if pid in data}
else:
    patterns_to_build = set(pattern_names.values())

for pattern in reg["patterns"].values():
    name = pattern_names[pattern["id"]]
    if len(pattern["operators"]) == 0 or name not in patterns_to_build:
        continue

    out += f"--- {pattern['name']}\n"
    out += "---\n"

    for op in pattern["operators"]:
        desc = op["description"].replace("\n", "\n--- ")
        signature = f"{op['inputs']} -> {op['outputs']}"
        out += f"--- [[{op['mod_id']}: {signature}]]({op['book_url']}) {desc}<br/>\n"

    out += f"function Spellmagica:{name}()"
    out += f'self:p"{pattern["signature"]}"'
    out += "end\n"
    # pname = pattern["name"].replace('"', '\\"')
    # out += f'Spellmagica["{pname}"]={{c=Spellmagica.{name}}}\n'

out += "return Spellmagica"
print(out)
