import registry
import hextypes
import lua
from utils import camel

reg = registry.get()

out = "--- Code generated by spellmagica. DO NOT EDIT.\n"
out += "--- @format disable\n"
out += "--- @meta spellmagica\n"

for k, t in hextypes.hexTypes.items():
    if not hextypes.native(t):
        out += f"--- @class {k}: {t}\n"

out += "--- @class Iota<T>: { s: number, t: T }\n"

out += "\nlocal pattern = {}"
mods: list[str] = []
for pattern in reg["patterns"].values():
    mod, _ = pattern["id"].split(":")
    if mod not in mods:
        mods.append(mod)
        out += f" local {mod} = {{}}"
modstr = ", ".join([f"{mod} = {mod}" for mod in mods])
out += f"local Spellmagica = {"{"} pattern = pattern, {modstr} {"}"}\n\n"

for pattern in reg["patterns"].values():
    if len(pattern["operators"]) < 1:
        continue

    out += f"--- {pattern['name']}\n"
    out += "---\n"

    argsN = 0
    argsT: list[list[str]] = []
    retsT: list[list[str]] = []
    for op in pattern["operators"]:
        desc = op["description"].replace("\n", "\n--- ")
        out += f"--- [[{op['mod_id']}]]({op['book_url']}) {desc}<br/>\n"
        if op["inputs"] != None:
            args = hextypes.split(op["inputs"])
            argsN = max(argsN, len(args))
            for i, arg in enumerate(args):
                if i >= len(argsT):
                    argsT.append([])
                if arg not in argsT[i]:
                    argsT[i].append(arg.strip())
        if op["outputs"] != None:
            rets = hextypes.split(op["outputs"])
            for i, ret in enumerate(rets):
                if i >= len(retsT):
                    retsT.append([])
                if ret not in retsT[i]:
                    retsT[i].append(ret.strip())
    out += "---\n"

    for i, args in enumerate(argsT):
        args = [hextypes.get(arg) for arg in args]
        out += f"--- @param p{i} Iota<{"|".join(args)}>\n"
    for i, rets in enumerate(retsT):
        rets = [hextypes.get(ret) for ret in rets]
        out += f"--- @return Iota<{"|".join(rets)}>\n"

    mod, name = pattern["id"].split(":")
    name = camel(name.replace("/", "_"))
    if name in lua.keywords or name[0].isdigit():
        name = f"_{name}"
    argsParams = ", ".join([f"p{i}" for i in range(argsN)])
    out += f"function {mod}.{name}({argsParams}) end\n"

    pname = pattern["name"].replace('"', '\\"')
    out += f'pattern["{pname}"] = {mod}.{name}\n\n'

out += "--- @generic T\n"
out += "--- @param p T\n"
out += "--- @return Iota<T>\n"
out += "function Spellmagica.of(p) end\n"
out += "--- Pushes garbage onto the stack.\n"
out += "--- @return Iota<HexGarbage>\n"
out += "function Spellmagica.garbage() end\n\n"

out += "return Spellmagica"
print(out)
